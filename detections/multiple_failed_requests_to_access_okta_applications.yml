title: Multiple Failed Requests to Access Okta Applications
id: 5f9e45f26f5e4a190a61ef4c697c0d72
description: |
  Detects an adversary attempting to reuse a stolen web session cookie in an org with well-configured authentication policies.
  Looks for multiple attempts to open app chiclets with no successful response to an authentication challenge.
  This detection assumes authentication policies are setup to require re-authentication on every access, especially for high impact applications. 
references:
  - https://sec.okta.com/shareddetections
author: Okta
created_date: '2023-04-06'
modified_date: '2023-04-06'
threat:
  Tactic:
    - Discovery
    - Defense Evasion
    - Lateral Movement
  Technique:
    - T1550.004 Use Alternate Authentication Material.Web Session Cookie
    - T1538 Cloud Service Dashboard
prevention:
  - Setup strict authentication policies based on risk of the application being accesssed if compromised
  - For high risk applications, ensure re-authentication is configured to every time the app is accessed. This ensures that if a session cookie is stolen, the threat actor will be prompted again for an MFA factor when accessing these apps. 
detection:
  explanation: | 
    The query below: 
    Retrieves policy evaluation and SSO details in events that contain the Application requested
    Formats target fields so we can aggregate specifically on Applications (AppInstances)
    Groups by User, Session, and IPs
    Creates a ratio of successful SSO events to total MFA challenges related to Application Sign On policies
    Alerts when more than half of app sign on events are unsuccessful, and challenges were unsatisfied for more than 3 apps
  splunk: |
    index=main sourcetype=oktaim2:log target{}.type=AppInstance (eventType=policy.evaluate_sign_on outcome.result=CHALLENGE) OR (eventType=user.authentication.sso outcome.result=SUCCESS) 
    | eval targets=mvzip('target{}.type', 'target{}.displayName', ": ")
    | eval targets=mvfilter(targets LIKE "AppInstance%")
    ```Stats per user/session/ip/target app```
    | stats count min(_time) as _time values(outcome.result) as outcome.result dc(eval(if(eventType="policy.evaluate_sign_on",targets,NULL))) as total_challenges sum(eval(if(eventType="user.authentication.sso",1,0))) as total_successes by authenticationContext.externalSessionId targets actor.alternateId client.ipAddress
    ```Exclude apps that don't require a challenge```
    | search total_challenges > 0
    ```Group events by session/actor/ip```
    | stats min(_time) as _time values(*) as * sum(total_challenges) as total_challenges sum(total_successes) as total_successes values(eval(if('outcome.result'="SUCCESS",targets,NULL))) as success_apps values(eval(if('outcome.result'!="SUCCESS",targets,NULL))) as no_success_apps by authenticationContext.externalSessionId actor.alternateId client.ipAddress
    | fillnull
    | eval ratio=round(total_successes/total_challenges,2), severity="HIGH", mitre_technique_id="T1538", description='actor.alternateId'. " from " . 'client.ipAddress' . " seen opening " . total_challenges . " chiclets/apps with " . total_successes . " challenges successfully passed"
    | fields - count, targets
    ```Assuming a majority of apps have good sign-on policies, if we see three apps with ignored challenges, that's worth investigating```
    | search ratio < 0.5 total_challenges > 2
false_positives:
  - End users troubleshooting MFA issues, adjust ratio to fit your environnment