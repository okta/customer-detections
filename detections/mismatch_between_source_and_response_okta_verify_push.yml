title: Mismatch Between Source and Response for Verify Push Request
id: 6d16360eb451ac60db533258c0c5b48e
description: |
  Detects when an adversary has stolen a user password attempts to trick a user into accepting a Okta Verify Push request.
  The following detection identified variations in client-based values for source and response events to identify suspicious request behavior.
  The detection is enhanved if the org is evaluating behavior conditions in the authentication policies using Okta Behavior Detection.
references:
  - https://sec.okta.com/shareddetections
  - https://research.splunk.com/application/8085b79b-9b85-4e67-ad63-351c9e9a5e9a/
author: Okta
created_date: '2023-04-06'
modified_date: '2023-04-06'
threat:
  Tactic:
    - Credential Access
  Technique:
    - T1621 Multi-Factor Authentication Request Generation
prevention:
  - Protect sign-in flows by enforcing phishing-resistant authentication with Okta FastPass and FIDO2 WebAuthn.
  - Leverage Okta Number Challenge MFA over standard push verification
  - Block traffic from anonymizers and proxies via network zones that are often used by threat actors in account takeover
  - Educate users on how to identify and report suspicious MFA push notifications
detection:
  explanation: | 
    The query below: 
    Groups by SessionID and retrieves any system.push.send_factor_verify_push events (the source of the push) and user.authentication.auth_via_mfa events where the factor is OKTA_VERIFY_PUSH - (the user response to the push)
    Counts the total number of push events, successful authentication events, and any push sources where the client is a new device.
    Creates a ratio of successful sign-ins to pushes. 
    If the ratio (currently tuned aggressively) indicates push spam, or if a user has rejected a push, the detection proceeds to evaluate whether there is more than one IP address used during the session (session roaming) and the presence of both a new IP and new device during the session.
  splunk: |
   index=main sourcetype=OktaIM2:log eventType IN (system.push.send_factor_verify_push) OR (eventType IN (user.authentication.auth_via_mfa) debugContext.debugData.factor="OKTA_VERIFY_PUSH")
   | eval groupby='authenticationContext.externalSessionId'
    ``` Each push is sent to each registered push device, so we should group pushes around the same time as a single event for the purpose of this use-case ``` 
   | eval group_push_time=_time 
   | bin span=2s group_push_time 
   | fillnull value=NULL 
   | stats min(_time) as _time by authenticationContext.externalSessionId eventType debugContext.debugData.factor outcome.result actor.alternateId client.device client.ipAddress client.userAgent.rawUserAgent debugContext.debugData.behaviors group_push_time groupby
   | iplocation client.ipAddress
   | fields - lat, lon, group_push_time
    ```Get counts for number of push events, successful authentication events, and any push sources where the client is a new device ``` 
   | stats min(_time) as _time dc(client.ipAddress) as dc_ip 
    sum(eval(if(eventType="system.push.send_factor_verify_push" AND 'outcome.result'="SUCCESS",1,0))) as total_pushes 
    sum(eval(if(eventType="user.authentication.auth_via_mfa" AND 'outcome.result'="SUCCESS",1,0))) as total_successes 
    sum(eval(if(eventType="user.authentication.auth_via_mfa" AND 'outcome.result'="FAILURE",1,0))) as total_rejected 
    sum(eval(if(eventType="system.push.send_factor_verify_push" AND 'debugContext.debugData.behaviors' LIKE "%New Device=POSITIVE%",1,0))) as suspect_device_from_source 
    sum(eval(if(eventType="system.push.send_factor_verify_push" AND 'debugContext.debugData.behaviors' LIKE "%New IP=POSITIVE%",1,0))) as suspect_ip_from_source 
    values(eval(if(eventType="system.push.send_factor_verify_push",'client.ipAddress',""))) as src 
    values(eval(if(eventType="user.authentication.auth_via_mfa",'client.ipAddress',""))) as dest 
    values(*) as * by groupby 
   | eval ratio = round(total_successes/total_pushes,2)
    ```Create a ratio of successful sign ins to pushes. If the push and response come from the same IP, it's likely legit. Note that the current ratio is quite aggressive. Aside from tuning the ratio you could add other conditions, for example: dc Country > 1, other behaviors (NEW Geo-Location=POSITIVE), device.managed=false, client.os!={SOE_OS}```
   | search ((ratio < 0.5 AND total_pushes > 2) OR (total_rejected > 0)) AND dc_ip > 1 AND suspect_device_from_source > 0 AND suspect_ip_from_source > 0
false_positives:
  - Depending on how strict the ratio is, should be very rare. 